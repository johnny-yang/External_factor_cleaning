{
    "collab_server" : "",
    "contents" : "library(dplyr)\nlibrary(RMySQL)\nlibrary(openxlsx)\nlibrary(lubridate)\n\n# ----------------------------------------------------\nWeather_Clean_data<-function(path) {\n  \n  message(\"Start to Load and Process \",path)\n  # read raw data from txt files\n  # raw_data<-read.table(\"./Weather_crawler_Main/Shanghai.txt\",fill = TRUE,header = FALSE,sep = \"\\t\",encoding = \"UTF-8\",stringsAsFactors = F)\n  raw_data<-read.table(path,fill = TRUE,header = FALSE,sep = \"\\t\",encoding = \"UTF-8\",stringsAsFactors = F)\n  # data cleaning\n  raw_data<-filter(raw_data,raw_data$V1!=\"Here comes another month\")\n  city<-raw_data[[1]][1]\n  raw_data<-filter(raw_data,raw_data$V1!=city)\n  # add time to each row\n  tem<-raw_data[[1]][1]\n  for  (i in 1:length(raw_data[[1]])){\n    if (raw_data[[1]][i]=='') \n      raw_data[[1]][i]<-tem\n    else tem<-raw_data[[1]][i]\n  }\n  raw_data<-filter(raw_data,raw_data$V3!=\"\")\n  raw_data<-as.data.frame(raw_data)\n  #deal with time\n  raw_data$V1<-as.character(raw_data$V1)\n  raw_data$V2<-as.character(raw_data$V2) \n  \n  fac<-c(\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\")\n  for (m in 1:length(fac)){\n    for  (l in 1:length(raw_data[[2]])){\n      if (raw_data[[2]][l]==m)\n        raw_data[[2]][l]<-paste0(\"0\",raw_data[[2]][l],sep='')\n    }\n  }\n  \n  tem <-raw_data[[1]][1] \n  \n  for  (n in 1:length(raw_data[[2]])){\n    if (raw_data[[2]][n]==\"01\") {\n      tem<-substr(raw_data[[1]][n],start=1 ,stop = 8) \n      raw_data[[2]][n]<-paste0(tem,raw_data[[2]][n],sep='')\n    }\n    else {\n      raw_data[[2]][n]<-paste0(tem,raw_data[[2]][n],sep='')\n    }\n  }\n  raw_data<-select(raw_data,-1)\n  \n\n  # transfroming \"&nbsp;\" and \"o\"\n  #column 12-15\n  for(i in 12:15){\n    for  (k in 1:length(raw_data[[i]])){\n      if (raw_data[[i]][k]==\"&nbsp;\") {raw_data[[i]][k]=\"0\"\n      } else if (raw_data[[i]][k]==\"o\"){raw_data[[i]][k]=\"1\"\n      } else {raw_data[[i]][k]=\"0\"\n      }}\n  }\n  # transfroming \"-\" to zero in rainful data\n  for  (k in 1:length(raw_data[[7]])){\n    if (raw_data[[7]][k]==\"-\") {raw_data[[7]][k]=\"0\"\n    } \n  }\n  \n  # give table headers\n  Header<-c(\"C_DATE\",\"C_AVG_TEMP\",\"C_MAX_TEMP\",\"C_MIN_TEMP\",\"SLP\",\"H\",\"C_RAINFULL\",\"VV\",\"V\",\"VM\",\"VG\",\"C_RAIN\",\"C_SNOW\",\"C_STORM\",\"C_FOG\")\n  colnames(raw_data) = Header\n  \n  # drive city and station from original data\n  city<-as.character(city)\n  city<-strsplit(city,\",\")\n  city_name<-substr(city[[1]][1],start = 9 , stop = nchar(city[[1]][1]))\n  city_obs <-strsplit(city[[1]][2],\":\")\n  ob_station<-substr(city_obs[[1]][2],start = 2 , stop = nchar(city_obs[[1]][2]))\n  \n  # drive country from original data\n  Country_name<-c()\n  if ( city_name[1]=='Beijing') {Country_name<-c(\"China\")\n  }else if  (city_name[1]==\"Shanghai\") {Country_name[1]<-c(\"China\")\n  }else if  (city_name[1]==\"Chengdu\") {Country_name[1]<-c(\"China\")\n  }else if  (city_name[1]==\"Guangzhou\") {Country_name[1]<-c(\"China\")\n  }else if  (city_name[1]==\"New Delhi\") {Country_name[1]<-c(\"Inida\")\n  }else if  (city_name[1]==\"Bombay\") {Country_name[1]<-c(\"Inida\")\n  }else if  (city_name[1]==\"Sydney\") {Country_name[1]<-c(\"Austrila\")\n  }else if  (city_name[1]==\"Bangkok\") {Country_name[1]<-c(\"Thailand\")\n  }else if  (city_name[1]==\"Taibei\") {Country_name[1]<-c(\"Taiwan\")\n  }else if  (city_name[1]==\"Manila\") {Country_name[1]<-c(\"Philippine\")\n  }else if  (city_name[1]==\"Ha Noi\") {Country_name[1]<-c(\"Vietnam\")\n  }else if  (city_name[1]==\"Ho Chi Minh\") {Country_name[1]<-c(\"Vietnam\")\n  }\n  \n  # add new columns to the table\n  raw_data$C_COUNTRY=Country_name[1]\n  raw_data$C_CITY=city_name[1]\n  # order columns\n  raw_data_1<-select(raw_data,16:17)\n  raw_data_2<-select(raw_data,1:4)\n  raw_data_3<-select(raw_data,7)\n  raw_data_4<-select(raw_data,12:15)\n  raw_data<-cbind(raw_data_1,raw_data_2)\n  raw_data<-cbind(raw_data,raw_data_3)\n  raw_data<-cbind(raw_data,raw_data_4)\n  #transforming format  \n  raw_data$C_DATE<-as.Date(raw_data$C_DATE)\n  raw_data$C_RAIN<-as.numeric(raw_data$C_RAIN)\n  raw_data$C_SNOW<-as.numeric(raw_data$C_SNOW)\n  raw_data$C_STORM<-as.numeric(raw_data$C_STORM)\n  raw_data$C_FOG<-as.numeric(raw_data$C_FOG)\n  # dealing with factor format\n  return(raw_data)\n}\n\nWeather_Consolidation_data<-function(){\n  target_files<-c(\"Shanghai.txt\",\"Bombay.txt\",\"Sydney.txt\",\n                  \"Bangkok.txt\",\"Beijing.txt\",\"Chengdu.txt\",\n                  \"Guangzhou.txt\",\"New Delhi.txt\",\"Taibei.txt\",\n                  \"Manila.txt\",\"Ha Noi.txt\",\"Ho Chi Minh.txt\")\n  Raw.data<-Weather_Clean_data(\"./Weather_crawler_Main/Shanghai.txt\")\n  \n  for (i in 2:length(target_files)){\n    filepath <-paste0(\"./Weather_crawler_Main/\",target_files[i])\n    Raw.data<-rbind(Raw.data,Weather_Clean_data(filepath))\n  }\n  message(\"Start to Merge data \")\n  \n  write.csv(Raw.data,file = \"./Weather_raw_dara_backup/Weather_Main_backup.csv\",fileEncoding = \"utf-8\")\n  return(Raw.data)\n}\n\nWeather_Alternative_data<-function(){\n  message(\"Start to Alternative data to check raw data\")\n  raw_data<-read.table(\"./Weather_crawler_Alternative/Climate alternative data.txt\",header = T,sep = \",\",encoding = \"UTF-8\",stringsAsFactors = F)\n  raw_data$CST<-as.Date(raw_data$CST)\n  raw_data$Rain<-0\n  raw_data$Snow<-0\n  raw_data$Thunderstorm<-0\n  raw_data$Fog<-0\n  for (i in 1:length(raw_data[[1]])){\n    temp<-strsplit(raw_data[[22]][i],split = \"-\")\n    if (length(temp[[1]])>0){\n      for (m in 1:length(temp[[1]])){\n        if (temp[[1]][m]==\"Rain\") {raw_data[[25]][i]<-1}\n        if (temp[[1]][m]==\"Snow\") {raw_data[[26]][i]<-1}\n        if (temp[[1]][m]==\"Thunderstorm\") {raw_data[[27]][i]<-1}\n        if (temp[[1]][m]==\"Fog\") {raw_data[[28]][i]<-1}\n        \n      }\n      \n    }\n  }\n  raw_data<-select(raw_data,c(1,2,3,4,24,25,26,27,28))\n  names(raw_data)[5]<-\"City\"\n  write.csv(raw_data,file = \"./Weather_raw_dara_backup/Weather_alternative_backup.csv\",fileEncoding = \"utf-8\")\n  return(raw_data)\n}\n\nWeather_data_final_version<-function(){\n  raw_data<-Weather_Consolidation_data()\n  alternative_data<-Weather_Alternative_data()\n  message(\"Start to generate final data\")\n  raw_data$MATCH<-paste(raw_data$C_CITY,raw_data$C_DATE,sep = \"_\")\n  alternative_data$MATCH<-paste(alternative_data$City,alternative_data$CST,sep = \"_\")\n  Merge_data<-merge(raw_data,alternative_data,by = \"MATCH\" , all.x = T , all.y = F)\n  # 填补相关数据 寻找出仍然无法匹配的数据\n  for (i in 1:length(Merge_data[[1]])){\n    for (m in 1:3){\n      if (!is.na(Merge_data[[13+m]][i])&Merge_data[[4+m]][i]==\"-\"){\n        Merge_data[[4+m]][i]<-Merge_data[[13+m]][i]\n      }\n    }\n    for (n in 1:4){\n      if (Merge_data[[5]][i]==\"-\"&Merge_data[[6]][i]==\"-\"&Merge_data[[7]][i]==\"-\"){\n        Merge_data[[8+m]][i]<-Merge_data[[17+m]][i]\n        \n      }\n      \n    }\n  }\n  Merge_data<-select(Merge_data,1:12)\n  Merge_data[is.na(Merge_data)]<-0\n  # 这里的算法写的非常不好，但是时间有些紧，就先将就用了\n  for (l in 1:3){\n    for (k in 1:length(Merge_data[[1]])){\n      if (Merge_data[[4+l]][k]==\"-\"&Merge_data[[4+l]][k+1]==\"-\"&Merge_data[[4+l]][k+2]==\"-\"){\n        temp <- (as.numeric(Merge_data[[4+l]][k-1])-as.numeric(Merge_data[[4+l]][k+3]))/4\n        Merge_data[[4+l]][k]<-as.numeric(Merge_data[[4+l]][k-1])-temp\n        Merge_data[[4+l]][k+1]<-as.numeric(Merge_data[[4+l]][k-1])-temp*2\n        Merge_data[[4+l]][k+2]<-as.numeric(Merge_data[[4+l]][k-1])-temp*3\n        k = k+3\n        \n      }\n      if (Merge_data[[4+l]][k]==\"-\"&Merge_data[[4+l]][k+1]==\"-\"&!Merge_data[[4+l]][k+2]==\"-\"){\n        temp <- (as.numeric(Merge_data[[4+l]][k-1])-as.numeric(Merge_data[[4+l]][k+2]))/3\n        Merge_data[[4+l]][k]<-as.numeric(Merge_data[[4+l]][k-1])-temp\n        Merge_data[[4+l]][k+1]<-as.numeric(Merge_data[[4+l]][k-1])-temp*2\n        k = k+2\n        \n      }\n      if (Merge_data[[4+l]][k]==\"-\"&!Merge_data[[4+l]][k+1]==\"-\"){\n        Merge_data[[4+l]][k]<-(as.numeric(Merge_data[[4+l]][k-1])-as.numeric(Merge_data[[4+l]][k+2]))/2\n        k = k+1\n        \n      }\n      \n      \n    }\n}\n  Merge_data<-select(Merge_data,-1)\n  for (i in 1:3){\n    Merge_data[[3+i]]<-as.numeric(Merge_data[[3+i]])\n    Merge_data[[3+i]]<-round(Merge_data[[3+i]],digits = 2)\n  }\n  write.csv(Merge_data,file = \"./Weather_raw_dara_backup/Final_data_backup.csv\",fileEncoding = \"utf-8\")\n  return(Merge_data)\n}\n# ----------------------------------------------------\nFuel_loading_crude_oil_price<-function(){\n  # loading raw data (need to change colnames as \"PRICE\")\n  Brent <- read.csv(\"./Fuel_Brent_WTI_Raw_data/DCOILBRENTEU.csv\",header = T , stringsAsFactors = F)\n  names(Brent)<-c(\"DATE\",\"PRICE\")\n  Brent$Name<-\"BRENT\"\n  WTI<-read.csv(\"./Fuel_Brent_WTI_Raw_data/DCOILWTICO.csv\",header = T , stringsAsFactors = F)\n  names(WTI)<-c(\"DATE\",\"PRICE\")\n  WTI$Name<-\"WTI\"\n  # merge data and filter na value\n  Merge_data<-rbind(Brent,WTI)\n  Merge_data$DATE<-as.Date(Merge_data$DATE)\n  for (i in 1:length(Merge_data[[1]])) {\n    if (Merge_data[[2]][i]==\".\"){\n      Merge_data[[2]][i]<-\"0\"}}\n  Merge_data$PRICE<-as.numeric(Merge_data$PRICE)\n  for (i in 1:length(Merge_data[[1]])) {\n    if (Merge_data[[2]][i]==\"0\"){\n      Merge_data[[2]][i]<-Merge_data[[2]][i-1]\n    }\n  }\n  return(Merge_data)\n}\n\nFuel_data_loading<-function(){\n  Merge_data<-Fuel_loading_crude_oil_price()\n  # generate working data for further analysis\n  Raw_data<-read.xlsx(\"./Fuel_Brent_WTI_Raw_data/Match_data.xlsx\")\n  Raw_data$Date<-as.Date(Raw_data$Date)\n  data_working<-merge(Merge_data,Raw_data,by.x = \"DATE\",by.y =\"Date\",all.x = T,all.y = F)\n  data_working<-filter(data_working,!is.na(Country)) \n  return(data_working)\n}\n\nFuel_generate_cofficient<-function(){\n  data_working<-Fuel_data_loading()\n  # generate adjusted coefficient \n  countrylist<-c(\"Austrilia\",\"Thailand\",\"India\")\n  country_original_list<-c(\"AU\",\"TH\",\"IN\")\n  crude_oillist<-c(\"BRENT\",\"WTI\")\n  Type<-c(\"Petrol\",\"Diesel\")\n  # initialization\n  coef_table<-data.frame(matrix(NA,12,5) )\n  names(coef_table)<-c(\"Country\",\"Oil Name\",\"Type\",\"Adjusted coefficient(multiply crude oil)\",\"T-value\")\n  Namelist<-c()\n  Modellist<-c()\n  x<-1\n  y<-1\n  # assign value\n  for (i in 1:6) {\n    if (i<=3){\n      n=1\n      Namelist[i]<-paste(countrylist[x],crude_oillist[n],sep =\"_\")\n      assign(Namelist[i],filter(data_working,`Country`==country_original_list[x],`Name`==crude_oillist[n]))\n      Modellist[i]<-paste(\"Model\",countrylist[x],crude_oillist[n],\"Petrol\",sep =\"_\")\n      Modellist[i+6]<-paste(\"Model\",countrylist[x],crude_oillist[n],\"Diesel\",sep =\"_\")\n      assign(Modellist[i],lm(Petrol~PRICE-1,data=get(Namelist[i])))\n      assign(Modellist[i+6],lm(Diesel~PRICE-1,data =get(Namelist[i])))\n      coef_table[[1]][i]<-countrylist[x]\n      coef_table[[2]][i]<-crude_oillist[n]\n      coef_table[[3]][i]<-\"Petrol\"\n      coef_table[[4]][i]<-summary(get(Modellist[i]))$coefficients[1]\n      coef_table[[5]][i]<-summary(get(Modellist[i]))$coefficients[3]\n      coef_table[[1]][i+6]<-countrylist[x]\n      coef_table[[2]][i+6]<-crude_oillist[n]\n      coef_table[[3]][i+6]<-\"Diesel\"\n      coef_table[[4]][i+6]<-summary(get(Modellist[i+6]))$coefficients[1]\n      coef_table[[5]][i+6]<-summary(get(Modellist[i+6]))$coefficients[3]\n      if (i<3){\n        x=x+1\n      }\n    }else if (i>=4&i<=6){\n      n=2\n      Namelist[i]<-paste(countrylist[y],crude_oillist[n],sep =\"_\")\n      assign(Namelist[i],filter(data_working,`Country`==country_original_list[y],`Name`==crude_oillist[n]))\n      Modellist[i]<-paste(\"Model\",countrylist[y],crude_oillist[n],\"Petrol\",sep =\"_\")\n      Modellist[i+6]<-paste(\"Model\",countrylist[y],crude_oillist[n],\"Diesel\",sep =\"_\")\n      assign(Modellist[i],lm(Petrol~PRICE-1,data=get(Namelist[i])))\n      assign(Modellist[i+6],lm(Diesel~PRICE-1,data =get(Namelist[i])))\n      coef_table[[1]][i]<-countrylist[y]\n      coef_table[[2]][i]<-crude_oillist[n]\n      coef_table[[3]][i]<-\"Petrol\"\n      coef_table[[4]][i]<-summary(get(Modellist[i]))$coefficients[1]\n      coef_table[[5]][i]<-summary(get(Modellist[i]))$coefficients[3]\n      coef_table[[1]][i+6]<-countrylist[y]\n      coef_table[[2]][i+6]<-crude_oillist[n]\n      coef_table[[3]][i+6]<-\"Diesel\"\n      coef_table[[4]][i+6]<-summary(get(Modellist[i+6]))$coefficients[1]\n      coef_table[[5]][i+6]<-summary(get(Modellist[i+6]))$coefficients[3]\n      if (i<6){\n        y=y+1\n      }\n    }\n  }\n  write.csv(coef_table,file = \"./Fuel_Brent_WTI_cofficient/Cofficient_table_backup.csv\")\n  return(coef_table)\n}\n\nFuel_data_AI_Crude<-function(){\n  Merge_data<-Fuel_loading_crude_oil_price()\n  coef_table<-Fuel_generate_cofficient()\n  test<-merge(Merge_data,coef_table,by.x = \"Name\",by.y = \"Oil Name\",all.x = T,all.y = F)\n  test$Price<-round(test$PRICE*test$`Adjusted coefficient(multiply crude oil)`,digits = 3)\n  test<-select(test,c(2,4,1,5,8))\n  test<-filter(test,`DATE`>\"2007-12-31\")\n  write.csv(test,file = \"./Fuel_Brent_WTI_Raw_data/Final_data_backup.csv\")\n  return(test)\n}\n\nFuel_data_china<-function(){\n  raw_data<-read.table(\"./Fuel_China/China oil price.txt\",header = F,sep = \"\\t\",encoding = \"UTF-8\",stringsAsFactors = F,skip = 1)\n  names(raw_data)<-c(\"Date\",\"City\",\"90\",\"92\",\"95\",\"0\")\n  for (i in 1:length(raw_data[[1]])){\n    temp1<-substr(raw_data[[1]][i],1,4)\n    temp2<-substr(raw_data[[1]][i],5,6)\n    temp3<-substr(raw_data[[1]][i],7,8)\n    raw_data[[1]][i]<-paste(temp1,temp2,temp3,sep = \"-\")\n  }\n  raw_data$Date<-as.Date(raw_data$Date)\n  raw_data<-arrange(raw_data,`City`,`Date`)\n  write.csv(raw_data,file = \"./Fuel_China/Fuel_china_backup.csv\")\n  raw_data<-filter(raw_data,`City`==\"上海\")\n  raw_data<-select(raw_data,c(1,2,4))\n  raw_data<-na.omit(raw_data)\n  return(raw_data)\n}\n  \nFuel_data_thailand<-function(){\n  Raw_data<-read.csv(\"./Fuel_Thailand/Thailand oil price.txt\",header = T,sep = \",\" ,stringsAsFactors = F)\n  Raw_data$Time<-as.Date(Raw_data$Time,origin = \"1899-12-30\")\n  # here are some codes for errors , please transform the data to csv format\n  # Raw_data<-read.csv(\"Thailand oil price.csv\",header = T,stringsAsFactors = F)\n  # Raw_data$Time<-as.Date(Raw_data$Time,origin = \"1899-12-30\")\n  # Wrong_data<-filter(Raw_data,`Time`==\"2012-11-01\")\n  # Raw_data<-filter(Raw_data,`Time`!=\"2012-11-01\")\n  # Wrong_data[is.na(Wrong_data)]<-\"-\"\n  # for (i in 29:63) {\n  #   if (i!=63){\n  #     Wrong_data[[9]][i-1]<-Wrong_data[[2]][i]\n  #     Wrong_data[[10]][i-1]<-Wrong_data[[3]][i]\n  #     for (m in 4:12){\n  #       Wrong_data[[m-2]][i]<-Wrong_data[[m]][i]\n  #     }\n  #     \n  #   }else {\n  #     Wrong_data[[9]][i-1]<-Wrong_data[[2]][i]\n  #     Wrong_data[[10]][i-1]<-Wrong_data[[3]][i]\n  #     for (m in 4:13){\n  #       Wrong_data[[m-3]][i]<-Wrong_data[[m]][i]}\n  #   }\n  # }\n  # Raw_data<-rbind(Raw_data,Wrong_data)\n  # Raw_data<-select(Raw_data,-c(11:13))\n  # Raw_data<-arrange(Raw_data,Time)\n  for (i in 1:length(Raw_data[[1]])){\n    if (Raw_data[[7]][i]==\"-\"){\n      Raw_data[[7]][i]<-NA\n    }\n  }\n  Raw_data<-select(Raw_data,c(1,7))\n  Raw_data<-na.omit(Raw_data)\n  Raw_data<-filter(Raw_data,`Gas_THB`!=\"0\")\n  Raw_data$Gas_THB<-as.numeric(Raw_data$Gas_THB)\n  Raw_data<-group_by(Raw_data,Time)%>%summarise(gas_avg=mean(Gas_THB))\n  write.csv(Raw_data,file = \"./Fuel_Thailand/DATA_backup.csv\")\n  return(Raw_data)\n}\n\nFuel_data_final_version<-function(){\n  China<-Fuel_data_china()\n  Thianland<-Fuel_data_thailand()\n  AI<-Fuel_data_AI_Crude()\n  Austrilia<-filter(AI,`Country`==\"Austrilia\"&`Name`==\"WTI\"&`Type`==\"Diesel\")\n  India<-filter(AI,`Country`==\"India\"&`Name`==\"WTI\"&`Type`==\"Petrol\")\n  Data_China<-select(China,c(1,3))\n  Data_China$Country<-\"China\"\n  Data_Thailand<-Thianland\n  Data_Thailand$Country<-\"Thailand\"\n  Data_Austrilia<-select(Austrilia,c(1,5,2))\n  Data_India<-select(India,c(1,5,2))\n  names(Data_China)<-c(\"Date\",\"Price\",\"Country\")\n  names(Data_Thailand)<-c(\"Date\",\"Price\",\"Country\")\n  names(Data_Austrilia)<-c(\"Date\",\"Price\",\"Country\")\n  names(Data_India)<-c(\"Date\",\"Price\",\"Country\")\n  Final_data<-rbind(Data_China,Data_Thailand)\n  Final_data<-rbind(Final_data,Data_Austrilia)\n  Final_data<-rbind(Final_data,Data_India)\n  Final_data<-filter(Final_data,`Date`>=\"2013-01-01\")\n  write.csv(Final_data,file = \"./Fuel_price_backup/Fuel_price_backup.csv\")\n  return(Final_data)\n}\n# ----------------------------------------------------\nStock_Google<-function() {\n  Stock_Readtxt<-function(txtpath){\n    raw_data<-read.table(txtpath,header = T,sep = \"\\t\",fileEncoding = \"utf-8\",stringsAsFactors = F)\n    return(raw_data)\n  }\n  # 生成文件名\n  Exchange_name <- c(\"Austrilia.txt\",\"China-Shanghai.txt\",\"China-Shenzhen.txt\",\n                     \"India.txt\",\"New zealand.txt\",\"Taiwan.txt\",\"Thailand.txt\")\n  for (m in 1:length(Exchange_name)){\n    Exchange_name[m]<-paste0(\"./Stock_Price_Google/\",Exchange_name[m])\n  }\n  # 读写文件\n  for (i in 1:length(Exchange_name)){\n    if (i == 1) {\n      final_data<-Stock_Readtxt(Exchange_name[i])}\n    if (i!=1){\n      final_data<-rbind(final_data,raw_data)\n    }\n    raw_data<-Stock_Readtxt(Exchange_name[i])\n  }\n  return(final_data)\n}\n\nStock_Yahoo<-function(){\n  Austrilia<-read.csv(\"./Stock_Price_Yahoo/ASX 200.csv\",stringsAsFactors = FALSE)\n  Austrilia$Date<-as.Date(Austrilia$Date) \n  Austrilia$Country=\"Australia\"\n  Austrilia$Code=\"ASX 200\"\n  Austrilia<-select(Austrilia,c(8,9,1,2,3,4,5))\n  \n  India<-read.csv(\"./Stock_Price_Yahoo/BSE SENSEX.csv\",stringsAsFactors = FALSE)\n  India$Date<-as.Date(India$Date) \n  India$Country=\"India\"\n  India$Code=\"BSE SENSEX\"\n  India<-select(India,c(8,9,1,2,3,4,5))\n  \n  China_sse<-read.csv(\"./Stock_Price_Yahoo/SSE Composite Index.csv\",stringsAsFactors = FALSE)\n  China_sse$Date<-China_sse$Date<-as.Date(China_sse$Date) \n  China_sse$Country=\"China\"\n  China_sse$Code=\"SSE Composite Index\"\n  China_sse<-select(China_sse,c(6,7,1,5,3,4,2))\n  \n  China_szse<-read.csv(\"./Stock_Price_Yahoo/SZSE COMP SUB IND.csv\",stringsAsFactors = FALSE)\n  China_szse$Date<-China_szse$Date<-as.Date(China_szse$Date) \n  China_szse$Country=\"China\"\n  China_szse$Code=\"SZSE COMP SUB IND\"\n  China_szse<-select(China_szse,c(6,7,1,5,3,4,2))\n  \n  Final_data<-rbind(Austrilia,India)\n  Final_data<-rbind(Final_data,China_sse)\n  Final_data<-rbind(Final_data,China_szse)\n  Final_data<-filter(Final_data,`Date`>\"2007-12-31\")\n  return(Final_data)\n}\n# ----------------------------------------------------\nHoliday_data<-function(){\n  raw_name<-c(\"China\",\"India\",\"Australia\",\"Thailand\",\"Taiwan\",\"Philippines\",\"Indonesia\")\n  \n  \n  for (i in 1:7) {\n    raw_data<-read.xlsx(\"./Holiday_raw_data/holiday data.xlsx\",sheet = i)\n    raw_data$Date<-as.Date(raw_data$Date,origin=\"1899-12-30\")\n    raw_data<-select(raw_data,1:4)\n    raw_data$Country<-raw_name[[i]][1]\n    if (i==1){\n      raw_data_new<-raw_data\n    }\n    else {\n      raw_data_new<-rbind(raw_data_new,raw_data)\n    }\n    \n  }\n  write.csv(raw_data_new,file = \"./Holiday_raw_data/Holiday_Raw_data_Cleanned.csv\")\n  return(raw_data_new)\n}\n\nHoliday_data_cleaning<-function(Country_name,Developer = FALSE,Date_option = FALSE,Date_input){\n  #Country_name<-\"China\"\n  # Year<-2017\n  if (Date_option){begin_data<-Date_input}else{\n    begin_data<-\"2010-01-04\"\n  }\n  Initialization<-function(){\n    raw_data<-Holiday_data()\n    name_list<-read.xlsx(\"./Holiday_raw_data/Holiday_name_list.xlsx\")\n    raw_data$MATCH<-paste(raw_data$Country,raw_data$Holiday,sep = \"_\")\n    name_list$MATCH<-paste(name_list$Country,name_list$Holiday,sep = \"_\")\n    name_list<-distinct(name_list)\n    raw_data<-merge(raw_data,name_list,by = \"MATCH\" , all.x = T , all.y = F)\n    return(raw_data)\n  }\n  raw_data<-Initialization()\n  # write dismatch data\n  if (Developer){\n    check<-filter(raw_data,is.na(Rename))\n    write.csv(check,file = \"./Holiday_Data_back_up/Holiday_dismatch.csv\")\n  }\n  # standardlized data\n  data_filter_bycountry<-function(raw_data,name_list,Country_name){\n    raw_data<-filter(raw_data,`Country.x`==Country_name)\n    raw_data<-arrange(raw_data,Date)\n    name_list<-select(raw_data,c(3,9))%>%distinct()\n    raw_data$count<-0\n    len<-length(names(raw_data))\n    for (i in 1:len){\n      raw_data[[i]]<-trimws(raw_data[[i]],\"l\")\n      raw_data[[i]]<-trimws(raw_data[[i]],\"r\")\n    }\n    name_list[[1]]<-trimws(name_list[[1]],\"l\")\n    name_list[[1]]<-trimws(name_list[[1]],\"r\")\n    raw_data<-distinct(raw_data)\n    name_list<-distinct(name_list)\n    raw_data<-na.omit(raw_data)\n    name_list<-na.omit(name_list)\n    name_list<-select(name_list,-1) %>% distinct()\n    for (i in 2:length(raw_data[[1]])){\n      if (raw_data[[2]][i]==(as.Date(raw_data[[2]][i-1])+1)&raw_data[[9]][i]==raw_data[[9]][i-1]){\n        raw_data[[10]][i]<-as.numeric(raw_data[[10]][i-1])+1\n      }\n    }\n    \n    \n    raw_data$Final_name<-\"-\"\n    for (m in 1:length(raw_data[[1]])){\n      if (raw_data[[10]][m]==0){\n        raw_data[[11]][m]<-raw_data[[9]][m]\n      }else{\n        raw_data[[11]][m]<-paste(raw_data[[9]][m],raw_data[[10]][m],sep = \"_\")}\n    }\n    New_date<-seq.Date(as.Date(\"2010-01-01\"),as.Date(\"2020-01-01\"),\"day\")\n    Newdata<-as.data.frame(New_date)\n    New_names<-c(\"Date\")\n    name_list<-unique(raw_data[[11]])\n    for (i in 1:length(name_list)){\n      Newdata[[1+i]]<-0\n      New_names[i+1]<-name_list[i]\n    }\n    names(Newdata)<-New_names\n    Newdata<-merge(Newdata,raw_data,by = \"Date\",all.x = T,all.y =T )\n    Newdata[is.na(Newdata)]<-\"0\"\n    \n    \n    \n    for (m in 1:length(Newdata[[1]])){\n      for (i in 1:length(New_names)){\n        if (New_names[i] == Newdata[[length(New_names)+10]][m]){\n          Newdata[[i]][m]<-1\n        }\n      }\n      \n    }\n    Newdata<-select(Newdata,1:length(New_names))\n    \n    Newdata<-Newdata%>%tidyr::gather(Hol,Values,-Date)  %>%\n      group_by(`Date`,`Hol`)%>%summarise(Values=sum(as.numeric(Values)))%>% \n      tidyr::spread(Hol,Values)\n    Newdata$Warning<-0\n    \n    for (m in 2:length(New_names)){\n      Newdata[[m]]<-as.numeric(Newdata[[m]])\n      Newdata[[length(New_names)+1]]<-Newdata[[length(New_names)+1]]+Newdata[[m]]\n    }\n    Newdata$Warning<-as.character(Newdata$Warning)\n    for (i in 1:length(Newdata[[1]])){\n      if (Newdata[[1+length(New_names)]][i]==\"2\"){\n        Newdata[[1+length(New_names)]][i]<-\"Holiday overlapped!\"\n      }else{\n        Newdata[[1+length(New_names)]][i]<-\"\"\n      }\n    }\n    return(Newdata)\n  }\n  # data special for Australia\n  data_filter_AU<-function(raw_data,name_list){\n    raw_data<-filter(raw_data,`Country.x`==\"Australia\")\n    raw_data<-arrange(raw_data,Date)\n    name_list<-select(raw_data,c(3,9))%>%distinct()\n    raw_data$count<-0\n    len<-length(names(raw_data))\n    for (i in 1:len){\n      raw_data[[i]]<-trimws(raw_data[[i]],\"l\")\n      raw_data[[i]]<-trimws(raw_data[[i]],\"r\")\n    }\n    name_list[[1]]<-trimws(name_list[[1]],\"l\")\n    name_list[[1]]<-trimws(name_list[[1]],\"r\")\n    raw_data<-distinct(raw_data)\n    name_list<-distinct(name_list)\n    raw_data<-na.omit(raw_data)\n    name_list<-na.omit(name_list)\n    name_list<-select(name_list,-1) %>% distinct()\n    for (i in 2:length(raw_data[[1]])){\n      if (raw_data[[2]][i]==(as.Date(raw_data[[2]][i-1])+1)&raw_data[[9]][i]==raw_data[[9]][i-1]){\n        raw_data[[10]][i]<-as.numeric(raw_data[[10]][i-1])+1\n      }\n    }\n    raw_data$Final_name<-\"-\"\n    for (m in 1:length(raw_data[[1]])){\n      if (raw_data[[10]][m]==0){\n        raw_data[[11]][m]<-raw_data[[9]][m]\n      }else{\n        raw_data[[11]][m]<-paste(raw_data[[9]][m],raw_data[[10]][m],sep = \"_\")}\n    }\n    New_date<-seq.Date(as.Date(\"2010-01-01\"),as.Date(\"2020-01-01\"),\"day\")\n    Newdata<-as.data.frame(New_date)\n    New_names<-c(\"Date\")\n    for (i in 1:length(name_list[[1]])){\n      Newdata[[1+i]]<-0\n      New_names[i+1]<-name_list[[1]][i]\n    }\n    names(Newdata)<-New_names\n    Newdata<-merge(Newdata,raw_data,by = \"Date\",all.x = T,all.y =T )\n    Newdata[is.na(Newdata)]<-\"0\"\n    for (m in 1:length(Newdata[[1]])){\n      x<-0\n      if (Newdata[[length(New_names)+4]][m]!=\"0\"&Newdata[[length(New_names)+4]][m]!=\"National\"){\n        a<-strsplit(Newdata[[length(New_names)+4]][m],split = \",\")\n        for (t in 1:length(a[[1]])){\n          if (a[[1]][t]==\"QLD\"|a[[1]][t]==\"NSW\"|a[[1]][t]==\"VIC\"|a[[1]][t]==\"ACT\"){\n          x<-1 }\n        }\n        if (x!=1){\n          Newdata[[length(New_names)+8]][m]<-\"0\"\n        }\n      }\n    }\n  \n    for (m in 1:length(Newdata[[1]])){\n      for (i in 1:length(New_names)){\n        if (New_names[i] == Newdata[[length(New_names)+8]][m]){\n          Newdata[[i]][m]<-1\n        }\n      }\n      \n    }\n    Newdata<-select(Newdata,1:length(New_names))\n    Newdata<-Newdata%>%tidyr::gather(Hol,Values,-Date)  %>%\n      group_by(`Date`,`Hol`)%>%summarise(Values=sum(as.numeric(Values)))%>% \n      tidyr::spread(Hol,Values)\n    Newdata$Warning<-0\n    for (m in 2:length(New_names)){\n      Newdata[[m]]<-as.numeric(Newdata[[m]])\n      Newdata[[length(New_names)+1]]<-Newdata[[length(New_names)+1]]+Newdata[[m]]\n    }\n    Newdata$Warning<-as.character(Newdata$Warning)\n    for (i in 1:length(Newdata[[1]])){\n      if (Newdata[[1+length(New_names)]][i]==\"2\"){\n        Newdata[[1+length(New_names)]][i]<-\"Holiday overlapped!\"\n      }else{\n        Newdata[[1+length(New_names)]][i]<-\"\"\n      }\n    }\n    return(Newdata)\n  }\n  # data special for China\n  data_filter_CN<-function(raw_data,name_list){\n    raw_data<-Initialization()\n    raw_data<-filter(raw_data,`Country.x`==\"China\")\n    raw_data<-arrange(raw_data,Date)\n    name_list<-select(raw_data,c(3,9))%>%distinct()\n    raw_data$count<-0\n    len<-length(names(raw_data))\n    for (i in 1:len){\n      raw_data[[i]]<-trimws(raw_data[[i]],\"l\")\n      raw_data[[i]]<-trimws(raw_data[[i]],\"r\")\n    }\n    name_list[[1]]<-trimws(name_list[[1]],\"l\")\n    name_list[[1]]<-trimws(name_list[[1]],\"r\")\n    raw_data<-distinct(raw_data)\n    name_list<-distinct(name_list)\n    raw_data<-na.omit(raw_data)\n    name_list<-na.omit(name_list)\n    name_list<-select(name_list,-1) %>% distinct()\n    raw_data<-arrange(raw_data,Holiday.x,Date)\n    for (i in 2:length(raw_data[[1]])){\n      if (raw_data[[2]][i]==(as.Date(raw_data[[2]][i-1])+1)&raw_data[[9]][i]==raw_data[[9]][i-1]){\n        raw_data[[10]][i]<-as.numeric(raw_data[[10]][i-1])+1\n      }\n    }\n    \n    \n    raw_data$Final_name<-\"-\"\n    for (m in 1:length(raw_data[[1]])){\n      if (raw_data[[10]][m]==0){\n        raw_data[[11]][m]<-raw_data[[9]][m]\n      }else{\n        raw_data[[11]][m]<-paste0(raw_data[[9]][m],\"_P\",raw_data[[10]][m])}\n    }\n    New_date<-seq.Date(as.Date(\"2010-01-01\"),as.Date(\"2020-01-01\"),\"day\")\n    Newdata<-as.data.frame(New_date)\n    New_names<-c(\"Date\")\n    name_list<-unique(raw_data[[11]])\n    compulsary_name<-c()\n    for (i in 10:1){\n      Name_column<-paste0(\"H_CNY_M\",i)\n      compulsary_name<-c(compulsary_name,Name_column)\n    }\n    compulsary_name<-c(compulsary_name,\"H_CNY\")\n    for (i in 1:10){\n      Name_column<-paste0(\"H_CNY_P\",i)\n      compulsary_name<-c(compulsary_name,Name_column)\n    }\n    for (i in 5:1){\n      Name_column<-paste0(\"H_NY_M\",i)\n      compulsary_name<-c(compulsary_name,Name_column)\n    }\n    compulsary_name<-c(compulsary_name,\"H_NY\")\n    for (i in 1:5){\n      Name_column<-paste0(\"H_NY_P\",i)\n      compulsary_name<-c(compulsary_name,Name_column)\n    }\n    for (i in 7:1){\n      Name_column<-paste0(\"H_ND_M\",i)\n      compulsary_name<-c(compulsary_name,Name_column)\n    }\n    compulsary_name<-c(compulsary_name,\"H_ND\")\n    for (i in 1:7){\n      Name_column<-paste0(\"H_ND_P\",i)\n      compulsary_name<-c(compulsary_name,Name_column)\n    }\n    namelist_todrop<-c()\n    for (t in 1:length(name_list)){\n      for (i in 1:length(compulsary_name)){\n        if (name_list[t]==compulsary_name[i]){\n          namelist_todrop<-c(namelist_todrop,t)\n        }\n      }\n    }\n    a<-seq.int(from = 1,to = length(name_list))\n    name_list<-name_list[-match(namelist_todrop,a)]  \n    name_list<-c(compulsary_name,name_list)\n    \n    for (i in 1:length(name_list)){\n      Newdata[[1+i]]<-0\n      New_names[i+1]<-name_list[i]\n    }\n    names(Newdata)<-New_names\n    Newdata<-merge(Newdata,raw_data,by = \"Date\",all.x = T,all.y =T )\n    Newdata[is.na(Newdata)]<-\"0\"\n\n\n    for (m in 1:length(Newdata[[1]])){\n      for (i in 1:length(New_names)){\n        if (New_names[i] == Newdata[[length(New_names)+10]][m]){\n          Newdata[[i]][m]<-1\n        }\n      }\n    }\n    \n    \n    Newdata<-select(Newdata,1:length(New_names))\n    \n    \n    \n    Newdata<-Newdata%>%tidyr::gather(Hol,Values,-Date)  %>%\n      group_by(`Date`,`Hol`)%>%summarise(Values=sum(as.numeric(Values)))%>% \n      tidyr::spread(Hol,Values)\n    \n    name_need_arrange<-names(Newdata)\n    name_range<-c()\n    for (i in 1:length(New_names)){\n      for (m in 1:length(name_need_arrange)){\n        if (New_names[i]==name_need_arrange[m]){\n          name_range<-c(name_range,m)\n        }\n      }\n      \n    }\n    Newdata<-select(Newdata,name_range)  \n    for(i in 1:length(New_names)){\n      if (New_names[i]==\"H_CNY\"){\n        CNY<-i\n      }\n      if (New_names[i]==\"H_NY\"){\n        NY<-i\n      }\n      if (New_names[i]==\"H_ND\"){\n        ND<-i\n      }\n      \n    }\n    for (m in 11:(length(Newdata[[1]])-11)){\n      if (Newdata[[CNY]][m]==1){\n        for (t in 1:10){\n          Newdata[[CNY+t]][m+t]<-1\n          Newdata[[CNY-t]][m-t]<-1\n          \n        }\n      }\n      if (Newdata[[NY]][m]==1){\n        for (t in 1:5){\n          Newdata[[NY+t]][m+t]<-1\n          Newdata[[NY-t]][m-t]<-1\n          \n        }\n      }\n      if (Newdata[[ND]][m]==1){\n        for (t in 1:7){\n          Newdata[[ND+t]][m+t]<-1\n          Newdata[[ND-t]][m-t]<-1\n          \n        }\n      }\n      \n    }\n    \n    \n     Newdata$Warning<-0\n    \n    for (m in 2:length(New_names)){\n      Newdata[[m]]<-as.numeric(Newdata[[m]])\n      Newdata[[length(New_names)+1]]<-Newdata[[length(New_names)+1]]+Newdata[[m]]\n    }\n    Newdata$Warning<-as.character(Newdata$Warning)\n    for (i in 1:length(Newdata[[1]])){\n      if (Newdata[[1+length(New_names)]][i]==\"2\"){\n        Newdata[[1+length(New_names)]][i]<-\"Holiday overlapped!\"\n      }else{\n        Newdata[[1+length(New_names)]][i]<-\"\"\n      }\n    }\n    return(Newdata)\n  }\n  # data China weekly \n  data_filter_CN_week<-function(raw_data,name_list,begin_data){\n    raw_data<-Initialization()\n    raw_data<-filter(raw_data,`Country.x`==\"China\")\n    raw_data<-arrange(raw_data,Date)\n    name_list<-select(raw_data,c(3,9))%>%distinct()\n    raw_data$count<-0\n    len<-length(names(raw_data))\n    for (i in 1:len){\n      raw_data[[i]]<-trimws(raw_data[[i]],\"l\")\n      raw_data[[i]]<-trimws(raw_data[[i]],\"r\")\n    }\n    name_list[[1]]<-trimws(name_list[[1]],\"l\")\n    name_list[[1]]<-trimws(name_list[[1]],\"r\")\n    raw_data<-distinct(raw_data)\n    name_list<-distinct(name_list)\n    raw_data<-na.omit(raw_data)\n    name_list<-na.omit(name_list)\n    name_list<-select(name_list,-1) %>% distinct()\n    raw_data<-arrange(raw_data,Holiday.x,Date)\n    for (i in 2:length(raw_data[[1]])){\n      if (raw_data[[2]][i]==(as.Date(raw_data[[2]][i-1])+1)&raw_data[[9]][i]==raw_data[[9]][i-1]){\n        raw_data[[10]][i]<-as.numeric(raw_data[[10]][i-1])+1\n      }\n    }\n    \n    raw_data$Final_name<-\"-\"\n    for (m in 1:length(raw_data[[1]])){\n      if (raw_data[[10]][m]==0){\n        raw_data[[11]][m]<-raw_data[[9]][m]\n      }else{\n        raw_data[[11]][m]<-paste0(raw_data[[9]][m],\"_P\",raw_data[[10]][m])}\n    }\n    New_date<-seq.Date(as.Date(begin_data),as.Date(\"2020-01-01\"),\"week\")\n    Newdata<-as.data.frame(New_date)\n    New_names<-c(\"Date\")\n    New_list<-c()\n    for (i in 1:length(name_list[[1]])){\n      Temp<-name_list[[1]][i]\n      Temp_PRE<-paste(name_list[[1]][i],\"PRE\",sep = \"_\")\n      Temp_POST<-paste(name_list[[1]][i],\"POST\",sep = \"_\")\n      New_list<-c(New_list,Temp_PRE)\n      New_list<-c(New_list,Temp)\n      New_list<-c(New_list,Temp_POST)\n      New_names<-c(New_names,Temp_PRE)\n      New_names<-c(New_names,Temp)\n      New_names<-c(New_names,Temp_POST)\n    }\n    for (i in 1:length(New_list)){\n      Newdata[[1+i]]<-0\n      New_names[i+1]<-New_list[i]\n    }\n    names(Newdata)<-New_names\n    sequence<-c()\n    for (i in 1:length(New_names)){\n      for (t in 1:length(name_list[[1]])){\n        if (New_names[i]==name_list[[1]][t]){\n          sequence<-c(sequence,i)\n        }\n      }\n    }\n    raw_data$Date<-as.Date(raw_data$Date)\n\n    for (t in 1:length(raw_data[[1]])){\n      for (i in 1:length(Newdata[[1]])){\n        cal<-raw_data[[2]][t]-Newdata[[1]][i]\n        temp_col<-raw_data[[9]][t]\n        if (cal>=0&cal<=6){\n            for (l in 1:length(name_list[[1]])){\n            if (name_list[[1]][l]==temp_col) {\n              num<-sequence[l]\n              Newdata[[num]][i]<-1\n            }\n          }\n          }\n        }\n      }\n    \n    for (i in 1:length(Newdata[[1]])){\n      for (t in 1:length(name_list[[1]])){\n        if (Newdata[[sequence[t]]][i]==1){\n          Newdata[[sequence[t]+1]][i+1]<-1\n          Newdata[[sequence[t]-1]][i-1]<-1\n          \n        }\n      }\n    }\n  \n    return(Newdata)\n  }\n  \n  \n  if (Developer){\n    Country_name_list<-c(\"India\",\"Indonesia\",\"China\",\n                        \"Philippines\",\"Taiwan\",\"Thailand\")\n    for (i in 1:length(Country_name_list)){\n      Country_name<-Country_name_list[i]\n      Data_for_write<-data_filter_bycountry(raw_data,name_list,Country_name)\n      Filename<-paste0(\"./Holiday_Data_back_up/\",Country_name,\".csv\")\n      write.csv(Data_for_write,file = Filename )\n    }\n    Data_for_write<-data_filter_AU(raw_data,name_list)\n    write.csv(Data_for_write,file = \"./Holiday_Data_back_up/Australia.csv\" )\n    Data_for_write<-data_filter_CN(raw_data,name_list)\n    write.csv(Data_for_write,file = \"./Holiday_Data_back_up/China_Modeling.csv\" )\n    Data_for_write<-data_filter_CN_week(raw_data,name_list,begin_data)\n    write.csv(Data_for_write,file = \"./Holiday_week_back_up/China_Modeling_week.csv\" )\n    \n    Newdata<-\"\"\n    }else{\n    Newdata<-data_filter_bycountry(raw_data,name_list,Country_name)\n  } \n  \n  return(Newdata)\n    }\n  ",
    "created" : 1488769915143.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "6|36|112|0|\n114|39|129|0|\n121|36|124|2|\n131|37|156|0|\n158|39|216|0|\n218|41|239|0|\n241|30|249|0|\n251|37|313|0|\n315|31|324|0|\n326|28|342|0|\n344|31|383|0|\n385|36|407|0|\n409|26|430|0|\n410|35|413|2|\n432|24|462|0|\n464|25|483|0|\n488|47|490|2|\n491|29|499|2|\n502|17|505|2|\n507|67|580|2|\n623|96|632|6|\n663|47|830|2|\n832|63|920|2|\n923|17|940|4|\n",
    "hash" : "2715460679",
    "id" : "E7E3DA8B",
    "lastKnownWriteTime" : 1484814738,
    "last_content_update" : 1488957042057,
    "path" : "~/External_factor_cleaning/Function.R",
    "project_path" : "Function.R",
    "properties" : {
        "docOutlineVisible" : "1",
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}